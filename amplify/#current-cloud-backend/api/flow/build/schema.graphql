type Test {
  id: ID!
  question: String!
  headid: ID!
  answers: [String]
}

type Answer {
  id: ID!
  testid: ID
  answer: String!
  destination: ID
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTestConnection {
  items: [Test]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelTestFilterInput {
  id: ModelIDFilterInput
  question: ModelStringFilterInput
  headid: ModelIDFilterInput
  answers: ModelStringFilterInput
  and: [ModelTestFilterInput]
  or: [ModelTestFilterInput]
  not: ModelTestFilterInput
}

type Query {
  getTest(id: ID!): Test
  listTests(filter: ModelTestFilterInput, limit: Int, nextToken: String): ModelTestConnection
  getAnswer(id: ID!): Answer
  listAnswers(filter: ModelAnswerFilterInput, limit: Int, nextToken: String): ModelAnswerConnection
}

input CreateTestInput {
  id: ID
  question: String!
  headid: ID!
  answers: [String]
}

input UpdateTestInput {
  id: ID!
  question: String
  headid: ID
  answers: [String]
}

input DeleteTestInput {
  id: ID
}

type Mutation {
  createTest(input: CreateTestInput!): Test
  updateTest(input: UpdateTestInput!): Test
  deleteTest(input: DeleteTestInput!): Test
  createAnswer(input: CreateAnswerInput!): Answer
  updateAnswer(input: UpdateAnswerInput!): Answer
  deleteAnswer(input: DeleteAnswerInput!): Answer
}

type Subscription {
  onCreateTest: Test @aws_subscribe(mutations: ["createTest"])
  onUpdateTest: Test @aws_subscribe(mutations: ["updateTest"])
  onDeleteTest: Test @aws_subscribe(mutations: ["deleteTest"])
  onCreateAnswer: Answer @aws_subscribe(mutations: ["createAnswer"])
  onUpdateAnswer: Answer @aws_subscribe(mutations: ["updateAnswer"])
  onDeleteAnswer: Answer @aws_subscribe(mutations: ["deleteAnswer"])
}

type ModelAnswerConnection {
  items: [Answer]
  nextToken: String
}

input ModelAnswerFilterInput {
  id: ModelIDFilterInput
  testid: ModelIDFilterInput
  answer: ModelStringFilterInput
  destination: ModelIDFilterInput
  and: [ModelAnswerFilterInput]
  or: [ModelAnswerFilterInput]
  not: ModelAnswerFilterInput
}

input CreateAnswerInput {
  id: ID
  testid: ID
  answer: String!
  destination: ID
}

input UpdateAnswerInput {
  id: ID!
  testid: ID
  answer: String
  destination: ID
}

input DeleteAnswerInput {
  id: ID
}
